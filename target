#include <stdio.h>
#include <stdlib.h>

void get_size(int* n) {
    printf("Enter size of an array: ");
    scanf("%d", n);
}

void fill_array(int* arr, int n) {
    for (int i = 0; i < n; i++) {
        printf("Enter element %d: ", i + 1);
        scanf("%d", &arr[i]);
    }
}

int pair_exists(int** pairs, int count, int a, int b) {
    for (int i = 0; i < count; i++) {
        if ((pairs[i][0] == a && pairs[i][1] == b) || (pairs[i][0] == b && pairs[i][1] == a)) {
            return 1;
        }
    }
    return 0;
}

void unq_pairs(int* arr, int n) {
    int K;
    printf("Enter the target: ");
    scanf("%d", &K);

    int** pairs = (int**)malloc(sizeof(int*) * n);
    for (int i = 0; i < n; i++) {
        pairs[i] = (int*)malloc(sizeof(int) * 2);
    } 

    int count = 0;

    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (!pair_exists(pairs, count, arr[i], arr[j])) {
                if (arr[i] + arr[j] == K && arr[i] != arr[j]) {
                    pairs[count][0] = arr[i];
                    pairs[count][1] = arr[j];
                    count++;             
                }
            }
        }
    }

    if (count != 0) {
        printf("Pairs of elements that add up to %d are: [", K);
        for (int i = 0; i < count - 1; i++) {
            printf("[%d, %d], ", pairs[i][0], pairs[i][1]);
        }
        printf("[%d, %d]]\n", pairs[count - 1][0], pairs[count - 1][1]);
    }
    else {
        printf("No pairs of elements that add up to %d\n", K);
    }

    for (int i = 0; i < n; i++) {
        free(pairs[i]);
    }
    free(pairs);
}

int main() {
    int n;

    get_size(&n);
    int* arr = (int*)malloc(sizeof(int) * n);
    fill_array(arr, n);

    unq_pairs(arr, n);

    free(arr);

    return 0;
}
